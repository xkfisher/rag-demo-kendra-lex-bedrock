##This CloudFormation template creates an Amazon Kendra index. It adds a webcrawler datasource
##to the index and crawls the online AWS Documentation for Amazon Kendra, Amazon Lex and Amazon SageMaker
##After the datasource is configured, it triggers a datasource sync, i.e. the process to crawl the sitemaps
##and index the crawled documents.
##The output of the CloudFormation template shows the Kendra index id and the AWS region it was created in.
##It takes about 30 minutes to create an Amazon Kendra index and about 15 minutes more to crawl and index
##the content of these webpages to the index. Hence you might need to wait for about 45 minutes after
##launching the CloudFormation stack

AWSTemplateFormatVersion: '2010-09-09'
Description: Template Amazon Kendra RAG using OpenAI.
Parameters:
  LambdaCodeS3Bucket:
    Default: llmeba
    Type: String
    Description: S3 bucket name where Lambda code (zip) and LangChain layer is uploaded/present
  LambdaCodeS3Key:
    Default: cbp/lambda-orchestrator-openai.zip
    Type: String
    Description: S3 Key for Lambda code (zip) file 
  LangChainLayerS3Key:
    Default: cbp/langchainopenailayer.zip
    Type: String
    Description: S3 Key for LangChain layer
  LambdaFunctionName:
    Default: lambda_orchestrator_openAI
    Type: String
    Description: Name of a Lambda Handler. 
    ConstraintDescription: Must end with non-numeric character.
  LambdaHandlerPath:
    Default: lambda_function.lambda_handler
    Type: String
    Description: Path of a Lambda Handler. 
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
  LambdaIAMRoleName:
    Default: LambdaLLMIAMRoleOpenAI
    Type: String
    Description: UNIQUE name of the Lambda execution role for orchestrator
  LexBotName:
    Default: KendraLLMRAGBotOpenAI
    Type: String
    Description: UNIQUE name of the Lex bot
  # ConversationHistoryTable:
  #   Default: ConversationHistoryTable
  #   Type: String
  #   Description: Name of the Conversation History Table

Resources:
    ##Create the Role needed to create a Kendra Index
  KendraIndexRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': 'Kendra'
                Action:
                  - 'cloudwatch:PutMetricData'
              - Effect: Allow
                Resource: '*'
                Action: 'logs:DescribeLogGroups'
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:logs:${region}:${account}:log-group:/aws/kendra/*'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                Action: 'logs:CreateLogGroup'
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:logs:${region}:${account}:log-group:/aws/kendra/*:log-stream:*'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                Action: 
                  - 'logs:DescribeLogStreams'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
          PolicyName: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-DocsKendraIndexPolicy'
      RoleName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-DocsKendraIndexRole'
      
  ##Create the Kendra Index
  DocsKendraIndex:
    Type: 'AWS::Kendra::Index'
    Properties:
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-Index'
      Edition: 'DEVELOPER_EDITION'
      RoleArn: !GetAtt KendraIndexRole.Arn

  ##Create the Role needed to attach the Webcrawler Data Source
  KendraDSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:kendra:${region}:${account}:index/${index}'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                    index: !GetAtt DocsKendraIndex.Id
                Action:
                  - 'kendra:BatchPutDocument'
                  - 'kendra:BatchDeleteDocument'
          PolicyName: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-DocsDSPolicy'
      RoleName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-DocsDSRole'

  ##Attach S3 Data Source
  KendraDocsDS:
    Type: 'AWS::Kendra::DataSource'
    Properties: 
      DataSourceConfiguration: 
        S3Configuration:
          BucketName: !Ref LambdaCodeS3Bucket
          DocumentsMetadataConfiguration:
            S3Prefix: 'cbp/'
      IndexId: !GetAtt DocsKendraIndex.Id
      Name: 'KendraDocsDSOpenAI'
      RoleArn: !GetAtt KendraDSRole.Arn
      Type: 'S3'
      
    
  DataSourceSyncLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:kendra:${region}:${account}:index/${index}*'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                    index: !GetAtt DocsKendraIndex.Id
                Action:
                  - 'kendra:*'
          PolicyName: DataSourceSyncLambdaPolicy
          
  DataSourceSyncLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !GetAtt 'DataSourceSyncLambdaRole.Arn'
      Timeout: 900
      MemorySize: 1024
      Code:
        ZipFile: |

          # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          # SPDX-License-Identifier: MIT-0
          
          import json
          import logging
          import boto3
          import cfnresponse
          import random
          import os
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          INDEX_ID = os.environ['INDEX_ID']
          DS_ID = os.environ['DS_ID']
          AWS_REGION = os.environ['AWS_REGION']
          KENDRA = boto3.client('kendra')
          
          def start_data_source_sync(dsId, indexId):
              logger.info(f"start_data_source_sync(dsId={dsId}, indexId={indexId})")
              resp = KENDRA.start_data_source_sync_job(Id=dsId, IndexId=indexId)
              logger.info(f"response:" + json.dumps(resp))
          
          def lambda_handler(event, context):
              logger.info("Received event: %s" % json.dumps(event))
              start_data_source_sync(DS_ID, INDEX_ID)
              status = cfnresponse.SUCCESS
              cfnresponse.send(event, context, status, {}, None)
              return status

      Environment:
        Variables:
          INDEX_ID: !GetAtt DocsKendraIndex.Id
          DS_ID: !GetAtt KendraDocsDS.Id
  
  DataSourceSync:
    Type: Custom::DataSourceSync
    DependsOn: 
      - DocsKendraIndex
      - KendraDocsDS
    Properties:
      ServiceToken: !GetAtt DataSourceSyncLambda.Arn 

  LambdaIAMRole:
    Type: AWS::IAM::Role 
    Properties:
      RoleName: !Ref LambdaIAMRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonKendraFullAccess
      Policies:
        - PolicyName: KendraFullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: kendra:*
                Resource: "*"
        - PolicyName: BedrockFullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: bedrock:* 
                Resource: "*"
      
  
  LambdaExecutionPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
              Resource:
                - Fn::Sub: "arn:aws:s3:::${LambdaCodeS3Bucket}/*"
                - Fn::Sub: "arn:aws:s3:::${LambdaCodeS3Bucket}"
            - Effect: Allow
              Action:
                - kendra:BatchQuery
                - kendra:Query
              Resource: !GetAtt DocsKendraIndex.Arn
            # - Effect : Allow
            #   Action:
            #     - dynamodb:BatchGet*
            #     - dynamodb:DescribeStream
            #     - dynamodb:DescribeTable
            #     - dynamodb:Get*
            #     - dynamodb:Query
            #     - dynamodb:Scan
            #     - dynamodb:BatchWrite*
            #     - dynamodb:CreateTable
            #     - dynamodb:Delete*
            #     - dynamodb:Update*
            #     - dynamodb:PutItem
            #   Resource: 
            #     - Fn::Sub: "arn:aws:dynamodb:*:*:table/${ConversationHistoryTable}"
          Version: 2012-10-17
        PolicyName: LambdaExecutionPolicy
        Roles:
          - !Ref LambdaIAMRole

      
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Description: Lambda Orchestration function for integrating Amazon Kendra,Large Language model and Amazon Lex.
      Runtime: python3.9
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Sub ${LambdaCodeS3Key}
      Handler: !Sub ${LambdaHandlerPath}
      MemorySize: 1024
      Timeout: 120
      Role: !GetAtt LambdaIAMRole.Arn
      Layers:
      - !Ref LambdaLayer
      Environment:
        Variables:
          KENDRA_INDEX: !GetAtt DocsKendraIndex.Id
          KENDRA_REGION: !Ref AWS::Region
    DependsOn:
      - LambdaExecutionPolicy
      - LambdaIAMRole
  
  LexLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Action: "lambda:invokeFunction"
      Principal: "lexv2.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: 
        Fn::Sub: "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/${KendraLLMRAGBot}/TSTALIASID"
    DependsOn: LambdaFunction
  
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Sub ${LangChainLayerS3Key}
      Description: This is layer for LanChain library
      LayerName:  OpenAILangChainLayer
  

  LexBotIAMRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "lex.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: LexBotLambdaInvokePolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: !GetAtt LambdaFunction.Arn                  
  BotRuntimeRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lexv2.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          - PolicyName: LexRuntimeRolePolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - "polly:SynthesizeSpeech"
                    - "comprehend:DetectSentiment"
                  Resource: "*"
  
  KendraLLMRAGBot:
    DependsOn: BotRuntimeRole
    Type: 'AWS::Lex::Bot'
    Properties:
      Name: !Ref LexBotName
      RoleArn: !GetAtt 
        - BotRuntimeRole
        - Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      Description: Amazon Kendra LLM RAG Bot
      AutoBuildBotLocales: true
      TestBotAliasSettings:
        BotAliasLocaleSettings:
          - LocaleId: en_US
            BotAliasLocaleSetting:
              Enabled: true
              CodeHookSpecification:
                LambdaCodeHook:
                  CodeHookInterfaceVersion: '1.0'
                  LambdaArn: !GetAtt 
                    - LambdaFunction
                    - Arn
      BotLocales:
        - LocaleId: en_US
          Description: english bot
          NluConfidenceThreshold: 0.4
          VoiceSettings:
            VoiceId: Ivy
          Intents:
            - Name: greeting_intent
              Description: this is hello intent
              SampleUtterances:
                - Utterance: hi
                - Utterance: hello
              FulfillmentCodeHook:
                Enabled: true
            - Name: FallbackIntent
              Description: Default intent when no other intent matches
              FulfillmentCodeHook:
                Enabled: true
              ParentIntentSignature: AMAZON.FallbackIntent
            

  # ConversationHistory: 
  #   Type: "AWS::DynamoDB::Table"
  #   Properties:
  #     BillingMode: PAY_PER_REQUEST 
  #     AttributeDefinitions:
  #       - AttributeName: SessionId
  #         AttributeType: N
  #     KeySchema: 
  #       - AttributeName: SessionId
  #         KeyType: HASH
  #     TableName: !Ref ConversationHistoryTable

Outputs:
  Region:
    Description: Deployed Region
    Value: !Ref AWS::Region
  LambdaIAMRole:
    Description: Role for Lambda execution.
    Value: !Ref LambdaIAMRole
  KendraIndexID:
    Value: !GetAtt DocsKendraIndex.Id
  AWSRegion:
    Value: !Ref 'AWS::Region'
  LambdaFunction:
    Description: Lambda Function
    Value: !Ref LambdaFunction
